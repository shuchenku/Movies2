var search_data = {"index":{"searchIndex":["moviedata","movietest","avg_ratings()","dot_product()","load_data()","mean()","most_similar()","movies()","new()","new()","popularity()","popularity_list()","predict()","print_popularity_list()","rating()","rms()","run_test()","similarity()","stddev()","to_a()","viewers()","readme"],"longSearchIndex":["moviedata","movietest","moviedata#avg_ratings()","moviedata#dot_product()","moviedata#load_data()","movietest#mean()","moviedata#most_similar()","moviedata#movies()","moviedata::new()","movietest::new()","moviedata#popularity()","moviedata#popularity_list()","moviedata#predict()","moviedata#print_popularity_list()","moviedata#rating()","movietest#rms()","moviedata#run_test()","moviedata#similarity()","movietest#stddev()","movietest#to_a()","moviedata#viewers()",""],"info":[["MovieData","","MovieData.html","",""],["MovieTest","","MovieTest.html","",""],["avg_ratings","MovieData","MovieData.html#method-i-avg_ratings","()",""],["dot_product","MovieData","MovieData.html#method-i-dot_product","(vector1,vector2)","<p>computes dot product of 2 vectors\n"],["load_data","MovieData","MovieData.html#method-i-load_data","(param,test = false)","<p>this will read in the data from the original ml-100k files and stores them\nin whichever way it needs …\n"],["mean","MovieTest","MovieTest.html#method-i-mean","()","<p>returns the average predication error\n"],["most_similar","MovieData","MovieData.html#method-i-most_similar","(u,test = nil)","<p>this return a list of users whose tastes are most similar to the tastes of\nuser u\n"],["movies","MovieData","MovieData.html#method-i-movies","(u)","<p>returns the array of movies that user u has watched\n"],["new","MovieData","MovieData.html#method-c-new","(dir, test = nil)",""],["new","MovieTest","MovieTest.html#method-c-new","(predictions,test_data)",""],["popularity","MovieData","MovieData.html#method-i-popularity","(movie_id)","<p>this will return a number that indicates the popularity (higher numbers are\nmore popular). You should …\n"],["popularity_list","MovieData","MovieData.html#method-i-popularity_list","(print = nil)","<p>this will generate a list of all movie_id’s ordered by decreasing\npopularity\n"],["predict","MovieData","MovieData.html#method-i-predict","(u,m)","<p>returns a floating point number between 1.0 and 5.0 as an estimate of what\nuser u would rate movie m …\n"],["print_popularity_list","MovieData","MovieData.html#method-i-print_popularity_list","(poplist)","<p>Print out the list if needed\n"],["rating","MovieData","MovieData.html#method-i-rating","(u,m)","<p>returns the rating that user u gave movie m in the training set, and 0 if\nuser u did not rate movie m …\n"],["rms","MovieTest","MovieTest.html#method-i-rms","()","<p>returns the root mean square error of the prediction\n"],["run_test","MovieData","MovieData.html#method-i-run_test","(k = nil)","<p>runs the z.predict method on the first k ratings in the test set and\nreturns a MovieTest object containing …\n"],["similarity","MovieData","MovieData.html#method-i-similarity","(user1,user2,obj = :test)","<p>this will generate a number which indicates the similarity in movie\npreference between user1 and user2 …\n"],["stddev","MovieTest","MovieTest.html#method-i-stddev","()","<p>returns the standard deviation of the error\n"],["to_a","MovieTest","MovieTest.html#method-i-to_a","()","<p>returns an array of the predictions in the form [u,m,r,p]\n"],["viewers","MovieData","MovieData.html#method-i-viewers","(m)","<p>returns the array of users that have seen movie m\n"],["README","","README_md.html","","<p>movies-2\n<p>Uses cosine similarity for rating predictions.\n"]]}}